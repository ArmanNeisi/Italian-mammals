# body mass- area relationship:--------------------------------

#libraries:
install.packages("readxl")
library(readxl)
library(ggplot2)
library(dplyr)

#import database:
data <- read_excel("F:/arman/bologna/me/thesis/checlists/final islands.xlsx")
View(data)


# plot in linear model:

ggplot(data, aes(x = area, y = body_mass, color = status)) +
  geom_point(aes(shape = status, fill = status), size = 3, alpha = 0.7) +
  scale_x_log10() +
  scale_y_log10() +
  geom_smooth(method = "lm", se = FALSE) +  # ⬅️ Separate line per group
  scale_color_manual(values = c("Native" = "green", "Alien" = "red", "doubt (type)" = "black")) +
  scale_fill_manual(values = c("Native" = "green", "Alien" = "red", "doubt (type)" = "black")) +
  scale_shape_manual(values = c("Native" = 16, "Alien" = 16, "doubt (type)" = 16)) +
  labs(
    x = "Island Area (km²)",
    y = "Body Mass (gr)",
    title = "Body Mass vs Island Area by Status (trendlines)",
    color = "Status",
    shape = "Status"
  )+
  guides(
    color = guide_legend(override.aes = list(shape = 16)),
    fill = "none"  # optional: hide fill if not useful
  )


#######################
#check model assumptions (diagnostics):

# 1. Log-transform variables
data$log_body_mass <- log(data$body_mass)
data$log_area <- log(data$area)

# 2. Fit linear model
m <- lm(log_body_mass ~ log_area * status, data = data)

# 3. Summary of coefficients
summary(m)

# 4. Diagnostics
par(mfrow = c(2,2))
plot(m)    # residuals vs fitted, QQ-plot, etc

# examine our four diagnostic plots
#1.Linearity: Residuals cluster at certain fitted values (No strong curve)
#2. Homoscedasticity: The line is fairly flat → homoscedasticity looks okay.
#3. Normality: The middle fits well, but both tails deviate strongly (curved away).
#4. Influence: no catastrophic outliers, but some species are influential (worth checking which ones).

################################

# log–log predictions + ribbons:

library(ggeffects)

# 1. Prepare the data -------------------------
# log-transform body mass and area
data$log_body_mass <- log(data$body_mass)
data$log_area <- log(data$area)

# Make sure status is a factor (important!)
data$status <- as.factor(data$status)

# 2. Fit the linear model ---------------------
m_lm <- lm(log_body_mass ~ log_area * status, data = data)

# Model summary (slopes, intercepts, interaction)
summary(m_lm)

# 3. Predictions with ggeffects ---------------
# Keep predictions on the log scale
pred_mass <- ggpredict(m_lm, terms = c("log_area [all]", "status"), back.transform = FALSE)

# 4. Plot results -----------------------------
ggplot() +
  # Raw data points
  geom_point(data = data,
             aes(x = log_area, y = log_body_mass, color = status),
             size = 2, alpha = 0.6) +
  
  # Prediction lines
  geom_line(data = as.data.frame(pred_mass),
            aes(x = x, y = predicted, color = group),
            linewidth = 1.2) +
  
  # Confidence ribbons
  geom_ribbon(data = as.data.frame(pred_mass),
              aes(x = x, ymin = conf.low, ymax = conf.high, fill = group),
              alpha = 0.2, inherit.aes = FALSE) +
  
  # Labels and theme
  labs(
    x = "Island area (log km²)",
    y = "Body mass (log g)",
    title = "Body Mass – Island Area Relationship",
    color = "Status", fill = "Status"
  ) +
  theme_minimal(base_size = 14)

####-----------
# extract slopes:

## Summary of coefficients
coef(summary(m_lm))

## Aliens (baseline slope)
z_alien <- coef(m_lm)["log_area"]

## Natives (slope = baseline + interaction)
z_native <- coef(m_lm)["log_area"] + coef(m_lm)["log_area:statusNative"]

# Print them
z_alien; z_native;
