# =========================================================
# Body Size Distributions: ----------------------
# =========================================================

# libraries:
install.packages("readxl")
library(readxl)
library(ggplot2)
library(dplyr)

#import database:
data <- read_excel("F:/arman/bologna/me/thesis/checlists/final islands.xlsx")
View(data)



# Frequency Across Islands:
## how body sizes are distributed in terms of geographic presence.

install.packages("tidyverse")
library(tidyverse)

# 1. by islands:
## which body sizes are geographically widespread vs rare (ignores species status)

df <- data %>%                             ## Log-transform body mass for binning
  mutate(log_body_mass = log10(body_mass),
         body_bin = cut(log_body_mass,
                        breaks = seq(floor(min(log_body_mass)),
                                     ceiling(max(log_body_mass)),
                                     by = 0.2)))            #we divide the log-transformed body mass into bins of width 0.2. A bin is simply a range of values into which continuous data is grouped.

size_islands <- df %>%                    #### Count number of islands per body size bin
  group_by(body_bin) %>%
  summarise(n_islands = n_distinct(island)) %>%
  ungroup()

ggplot(size_islands, aes(x = body_bin, y = n_islands)) +      ## Plot number of islands per body size bin
  geom_bar(stat = "identity", fill = "forestgreen") +
  theme_minimal() +
  labs(x = "Body mass (log10 scale)",
       y = "Number of islands",
       title = "Widespread vs rare body sizes by island presence") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


# 2. By islands + grouped by status:

## number of islands per body size bin and per status (Native, alien, doubt).
## compares which body sizes are widespread for each status, and how much each status contributes.

df <- data %>%          ## Log-transform body mass and create bins
  mutate(log_body_mass = log10(body_mass),
         body_bin = cut(log_body_mass,
                        breaks = seq(floor(min(log_body_mass)),
                                     ceiling(max(log_body_mass)),
                                     by = 0.2)))

size_islands_status <- df %>%           ## Count number of islands per body size bin by status
  group_by(body_bin, status) %>%
  summarise(n_islands = n_distinct(island)) %>%
  ungroup()

## Plot number of islands per bin with species status (stacked version):

ggplot(size_islands_status, aes(x = body_bin, y = n_islands, fill = status)) +
geom_bar(stat = "identity", position = "stack") +
  theme_minimal() +
  labs(x = "Body mass bin (log10 scale)",
       y = "Number of islands",
       title = "Widespread vs rare body sizes (stacked by species status)") +
  scale_fill_manual(values = c("Native" = "steelblue",
                               "Alien" = "tomato",
                               "doubt (type)" = "gold")) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


#3. Density plot of body sizes, weighted by number of islands
ggplot(data, aes(x = log10(body_mass), fill = status)) +
  geom_density(alpha = 0.5) +
  theme_minimal() +
  labs(x = "Log10 Body mass",
       y = "Density (weighted by island presence)",
       title = "body sizes, weighted by number of islands")

  

#####------------------

# Species frequency distribution:
## Species-level body size distribution

# 1. histogram:
## keep only one row per species

mammals_unique <- data %>% distinct(species, .keep_all = TRUE)
ggplot(mammals_unique, aes(x = body_mass)) +
  geom_histogram(bins = 30, fill = "skyblue", color = "black") +
  scale_x_log10() +
  labs(title = "Histogram of Body Mass distribution",
       x = "Body Mass (g, log10 scale)",
       y = "Count of species") +
  theme_minimal()

# 2. boxplot:
## keep only one row per species
mammals_unique <- data %>% distinct(species, .keep_all = TRUE)

ggplot(mammals_unique, aes(y = body_mass)) +
  geom_boxplot(fill = "green", width = 0.2, outlier.shape = 21, outlier.alpha = NA) +
  geom_jitter(width = 0.1, alpha = 0.6, color = "black") +
  scale_y_log10() +
  labs(title = "Boxplot of Body Mass distribution",
       y = "Body Mass (g, log10 scale)",
x = "") +
  theme_minimal()

# highlight the extreme species (min & max body mass):
install.packages("ggrepel")
library(ggrepel)

mammals_unique <- data %>% distinct(species, .keep_all = TRUE)

extremes <- mammals_unique %>%                   ## find the min and max body mass species:
  filter(body_mass == min(body_mass) | body_mass == max(body_mass))

ggplot(mammals_unique, aes(x = "", y = body_mass)) +
  geom_boxplot(fill = "green", width = 0.2, outlier.shape = NA) +
  geom_jitter(width = 0.1, alpha = 0.6, color = "black") +
  geom_text_repel(data = extremes,
                  aes(label = species),
                  nudge_x = 0.3, # push labels to the right
                  size = 3,
                  color = "red") +
  scale_y_log10() +
  labs(title = "Boxplot of Body Mass (all mammal species)",
       y = "Body Mass (g, log10 scale)",
       x = "") +
  theme_minimal()

#3. smooth density:
ggplot(mammals_unique, aes(x = log10(body_mass))) +
  geom_density(fill = "steelblue", alpha = 0.5) +
  theme_minimal() +
  labs(x = "Log10 Body mass",
       y = "Density",
       title = "Body size distribution of species (density)")


# =========================================================
#distribution of island sizes:------------------
# =========================================================

# 1. Create a unique island dataframe:
island_df <- data %>%
  distinct(island, area) %>%                # keep only one row per island
  mutate(log_area = log10(area))             # log-transform area for better visualization


# 2. Plot histogram of island areas:
ggplot(island_df, aes(x = log_area)) +
  geom_histogram(breaks = breaks, fill = "darkgreen", alpha = 0.7) +
  theme_minimal() +
  labs(x = "Log10 Island area (kmÂ²)",
       y = "Number of islands",
       title = "Frequency distribution of island areas")

# 3. density plot
ggplot(island_df, aes(x = log_area)) +
  geom_density(fill = "darkgreen", alpha = 0.5) +
  theme_minimal() +
  labs(x = "Log10 Island area",
       y = "Density",
       title = "Density distribution of island areas")


# =========================================================
# island area distribution by species status:--------------------
# =========================================================

## Make sure we have unique island-status combinations
island_status <- data %>%
  distinct(island, area, status)

## Create log-transformed island area bins
island_status <- island_status %>%
  mutate(log_area = log10(area),
         area_bin = cut(log_area,
                        breaks = seq(floor(min(log_area, na.rm = TRUE)),
                                     ceiling(max(log_area, na.rm = TRUE)),
                                     by = 0.2)))

## Count number of islands per area bin and status
area_dist_status <- data %>%
  distinct(island, area, status) %>%
  mutate(log_area = log10(area),
         area_bin = cut(log_area, breaks = breaks)) %>%
  filter(!is.na(area_bin))   # remove NA bins

## Plot stacked bar chart

ggplot(area_dist_status, aes(x = area_bin, y = ..count.., fill = status)) +
  geom_bar(position = "dodge") +
  theme_minimal() +
  labs(x = "Island area bin (log10 scale)",
       y = "Number of islands",
       title = "Distribution of island areas by species status") +
  scale_fill_manual(values = c("Native" = "steelblue",
                               "Alien" = "tomato",
                               "doubt (type)" = "gold")) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))




# Island areas by species status (counts + % labels):

library(dplyr)
library(ggplot2)
library(ggrepel)

## Prepare percentages per bin
area_dist_pct <- area_dist_status %>%
  count(area_bin, status) %>%
  group_by(area_bin) %>%
  mutate(pct = n / sum(n) * 100,
         label = paste0(round(pct, 1), "%")) %>%
  ungroup()

## Stacked bar chart (counts) with ggrepel labels
ggplot(area_dist_pct, aes(x = area_bin, y = n, fill = status)) +
  geom_bar(stat = "identity", position = "stack") +   # stacked counts
  geom_text_repel(aes(label = label), 
                  position = position_stack(vjust = 0.5), # place inside stack
                  size = 3, color = "black", 
                  max.overlaps = 50, box.padding = 0.2) +
  theme_minimal() +
  labs(x = "Island area bin (log10 scale)",
       y = "Number of islands",
       title = "Island areas by species status (counts + % labels)") +
  scale_fill_manual(values = c("Native" = "steelblue",
                               "Alien" = "tomato",
                               "doubt (type)" = "gold")) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

